<?php

namespace Kily\Tools1C\OData\Tests;

use Kily\Tools1C\OData\Client;
use Kily\Tools1C\OData\Exception;
use Kily\Tools1C\OData\Profiler;
use Kily\Tools1C\OData\RequestException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-12-26 at 17:34:33.
 */
class ClientTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Client
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if(!isset($_SERVER['URL_ODATA_1C'])) {
            $this->markTestSkipped(
                'You should define ODATA_URL_1C in phpunit.xml to pass this test'
            );
        }
        if(isset($_SERVER['LOGIN']) && isset($_SERVER['PASSWORD'])) 
            $auth = [
                $_SERVER['LOGIN'],
                $_SERVER['PASSWORD'],
            ];

        $this->object = new Client($_SERVER['URL_ODATA_1C'],array_filter([
            'auth' => $auth, 
            'timeout'  => 300,
        ]));
    }

    /**
     * @covers Kily\Tools1C\OData\Client::__construct
     */
    public function test__construct()
    {
        $client = new Client('http://1c.kily.ru/ut/odata/standard.odata/',[
            'auth' => [
                'login',
                'password',
            ],
            'timeout'  => 300,
        ]);

        $this->assertTrue(is_object($client));
    }

    /**
     * @covers Kily\Tools1C\OData\Client::__get
     * @dataProvider objectNameProvider
     */

    public function test__get($attr,$is_exception)
    {
        $e = false;
        try {
            $this->object->$attr;
        } catch(Exception $e) {
            $e = (boolean)$e;
        }
        $this->assertTrue($e === $is_exception);
    }

    /**
     * @covers Kily\Tools1C\OData\Client::get
     */
    public function testGet()
    {
        // test list
        $data = $this->object->{'Catalog_Номенклатура'}->get(null, null, ['query' => ['$top' => 1]]);
        $this->assertTrue(is_array($data));
        $this->assertTrue(isset($data['value']));

        if(!isset($data['value']) || !count($data['value'])) { 
            $this->markTestSkipped(
                'There is no active Catalog_Номенклатура items, so we cant complete the test'
            );
        }
        $this->assertGreaterThan(0,count($data['value']));

        // test getting by Ref_Key
        $id = $data['value'][0]['Ref_Key'];
        $data = $this->object->{'Catalog_Номенклатура'}->get($id);
        $this->assertTrue(is_array($data));
        $this->assertTrue(isset($data['Ref_Key']));
        $this->assertTrue($data['Ref_Key'] === $id);

        //test filter
        $data = $this->object->{'Catalog_Номенклатура'}->get(null,'Ref_Key eq guid\'' . $id . '\'', [
            'query' => [
                '$top' => 1,
            ],
        ]);
        $this->assertTrue(is_array($data));
        $this->assertTrue(isset($data['value'][0]['Ref_Key']));
        $this->assertTrue($data['value'][0]['Ref_Key'] === $id);

    }

    /**
     * @covers Kily\Tools1C\OData\Client::create
     */
    public function testCreate()
    {
        if(!isset($_SERVER['ALLOW_UNSAFE_OPERATIONS']))
            $this->markTestSkipped(
                'You should explictly allow tests with create,update and delete operations'
            );

        $product_data = [
            'Артикул'=>'CERTANLY_NONEXISTENT_123',
            'Description'=>'test test test nonexistent',
        ];

        $data = $this->object->{'Catalog_Номенклатура'}->create($product_data);
    }


    /**
     * @covers Kily\Tools1C\OData\Client::update
     */
    public function testUpdate()
    {
        if(!isset($_SERVER['ALLOW_UNSAFE_OPERATIONS']))
            $this->markTestSkipped(
                'You should explictly allow tests with update operations'
            );

        $data = $this->object->{'Catalog_Номенклатура'}->get(null,"Артикул eq 'CERTANLY_NONEXISTENT_123'");
        $id = $data['value'][0]['Ref_Key'];

        $data = $this->object->{'Catalog_Номенклатура'}->update($id,[
            'Description'=>'Test description',
        ]);
    }

    /**
     * @covers Kily\Tools1C\OData\Client::delete
     */
    public function testDelete()
    {
        if(!isset($_SERVER['ALLOW_UNSAFE_OPERATIONS']))
            $this->markTestSkipped(
                'You should explictly allow tests with delete operations. WARNING! It could be DANGEROUS! Use it at your own risk!'
            );

        $data = $this->object->{'Catalog_Номенклатура'}->get(null,"Артикул eq 'CERTANLY_NONEXISTENT_123'");
        $id = $data['value'][0]['Ref_Key'];
        $data = $this->object->{'Catalog_Номенклатура'}->delete($id);

    }


    /**
     * @covers Kily\Tools1C\OData\Client::request
     */
    public function testRequest()
    {
        $this->object->{'Catalog_Номенклатура'};
        $data = $this->object->request("GET", [
            'query' => [
                '$top' => 1
            ],
        ]);
        $this->assertTrue(is_array($data));
    }

    /**
     * @covers Kily\Tools1C\OData\Client::get
     */
    public function testNotFoundException()
    {
        $this->setExpectedException(RequestException::class, 'Сущность \'Catalog_Номенклатураa\' не найдена', 404);
        $data = $this->object->{'Catalog_Номенклатураa'}->get();
    }

    /**
     * @deprecated
     * @covers Kily\Tools1C\OData\Client::getErrorMessage
     */
    public function testGetErrorMessage()
    {
        $this->object->isCompatibilityMode = true;
        $data = $this->object->{'Catalog_Номенклатураa'}->get();
        $this->assertEquals('Not found', $this->object->getErrorMessage());
        $data = $this->object->{'Catalog_Номенклатура'}->get(null, [
            'query' => [
                '$top' => 1,
            ],
        ]);
        $this->assertEquals('',$this->object->getErrorMessage());
    }

    /**
     * @deprecated
     * @covers Kily\Tools1C\OData\Client::getErrorCode
     */
    public function testGetErrorCode()
    {
        $this->object->isCompatibilityMode = true;
        $data = $this->object->{'Catalog_Номенклатураa'}->get();
        $this->assertEquals('404', $this->object->getErrorCode());

        $data = $this->object->{'Catalog_Номенклатура'}->get(null, [
            'query' => [
                '$top' => 1,
            ],
        ]);
        $this->assertEquals('', $this->object->getErrorCode());
    }

    /**
     * @deprecated
     * @covers Kily\Tools1C\OData\Client::isOk
     */
    public function testIsOk()
    {
        $this->object->isCompatibilityMode = true;
        $data = $this->object->{'Catalog_Номенклатураa'}->get();
        $this->assertFalse($this->object->isOk());
    }

    /**
     * @covers Kily\Tools1C\OData\Client::get
     */
    public function testExceptionAttributes()
    {
        $data = [
            'test' => 'test'
        ];
        $options = [
            'json' => $data,
        ];
        try {
            $this->object->{'Catalog_Номенклатураa'}->create($data);
        } catch (RequestException $e) {
            $this->assertEquals('POST', $e->request->getMethod());
            $this->assertEquals($options, $e->request->getOptions());
            $this->assertContains('Catalog_Номенклатураa', $e->request->getUrl());
        }
    }

    /**
     * @covers Kily\Tools1C\OData\Client::get
     */
    public function testGetMetadata() {
        $metadata = $this->object->getMetadata();
        $this->assertInternalType('array', $metadata);
        $keys = [
            'EntityType',
            'EntityContainer',
            'EnumType',
            'ComplexType',
            'Association',
        ];
        $this->assertNotCount(0, $metadata);
        foreach ($keys as $key) {
            $this->assertArrayHasKey($key, $metadata);
        }
    }

    public function testProfile() {
        $profiler = $this->getMockForAbstractClass(Profiler::class, [], '', true, true, true, [
            'setRequest'
        ]);
        $profiler->expects($this->once())
            ->method('setRequest');

        $profiler->expects($this->once())
            ->method('begin');
        $profiler->expects($this->once())
            ->method('end');
        $this->object->setProfiler($profiler);

        $this->object->{'Catalog_Номенклатура'}->get(null,"Артикул eq 'CERTANLY_NONEXISTENT_123'");
    }

    public function objectNameProvider()
    {
        return [
            ['Catalog_Номенклатура',false],
            ['Document_СчетНаОплату',false],
            ['Document_',true],
            ['Invalid_',true],
            ['Invalid_Nonexistent',true],
            ['Ohloh_test_Nonexistent',true],
        ];
    }
}
